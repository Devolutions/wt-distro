name: Release Package
on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'workflow run id'
        default: "latest"
        required: true
      rev_id:
        description: 'build revision id'
        default: "0"
        required: true
      dry-run:
        description: 'Build packages without publishing'
        required: true
        type: boolean
        default: 'true'

jobs:
  package:
    name: Build packages
    runs-on: windows-2022
    environment: publish
    
    steps:
      - name: Clone project
        uses: actions/checkout@v3

      - name: Import code signing certificate
        env:
          CODE_SIGN_CERT: ${{ secrets.WINDOWS_CODE_SIGNING_CERTIFICATE }}
          CODE_SIGN_CERT_PASSWORD: ${{ secrets.WINDOWS_CODE_SIGNING_PASSWORD }}
        run: |
          $CertificatePath = Join-Path -Path $Env:RUNNER_TEMP -ChildPath CodeSigningCertificate.pfx
          [IO.File]::WriteAllBytes($CertificatePath, ([Convert]::FromBase64String($Env:CODE_SIGN_CERT)))
          $SecurePassword = ConvertTo-SecureString "$Env:CODE_SIGN_CERT_PASSWORD" -AsPlainText -Force
          Import-PfxCertificate -FilePath "$CertificatePath" -CertStoreLocation Cert:\CurrentUser\My -Password $SecurePassword
          $CodesignThumbprint = Get-ChildItem cert:\CurrentUser\My -CodeSigning | Select-Object -First 1 -ExpandProperty Thumbprint
          echo "CODESIGN_THUMBPRINT=$CodesignThumbprint" >> $Env:GITHUB_ENV
          echo "TIMESTAMP_SERVER=http://timestamp.digicert.com" >> $Env:GITHUB_ENV

      - name: Download Windows Terminal
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $RunId = '${{ github.event.inputs.run_id }}'
          if ($RunId -eq 'latest') {
            $RunId = $(gh run list -w 'Windows Terminal' --json 'status,databaseId') |
              ConvertFrom-Json | Where-Object { $_.status -eq 'completed' } |
              Select-Object -First 1 -ExpandProperty databaseId
          }
          Write-Host "Downloading run $RunId"
          & gh run download $RunId
          Get-ChildItem */*.zip | ForEach-Object {
            if ($_.BaseName -Match "WindowsTerminal-(\d+.\d+.\d+.\d+)-(.*)") {
              $Version = $Matches[1]
              $Architecture = $Matches[2]
              $Destination = "runtimes/win-${Architecture}/native/wt"
              New-Item $Destination -ItemType Directory -Force | Out-Null
              Expand-Archive $_.FullName $Destination
              Remove-Item $_.FullName
              Remove-Item $_.Directory -ErrorAction SilentlyContinue
            }
          }
          $RevId = '${{ github.event.inputs.rev_id }}'
          $Version -Replace "(\d+).(\d+).(\d+).(\d+)", "`$1.`$2.`$3.$RevId"
          New-Item .\package -ItemType Directory -ErrorAction SilentlyContinue | Out-Null
          Set-Content -Path .\package\VERSION -Value $Version -NoNewLine -Force

      - name: Code sign Windows Terminal
        if: ${{ env.CODESIGN_THUMBPRINT }}
        shell: pwsh
        run: |
          $TimestampServer = $Env:TIMESTAMP_SERVER
          $Certificate = Get-Item cert:\CurrentUser\My\$Env:CODESIGN_THUMBPRINT
          foreach ($Architecture in @('x64', 'arm64')) {
            $WtDir = "runtimes/win-${Architecture}/native/wt"
            Get-ChildItem -Path "$WtDir/*" -Include @("*.exe","*.dll") -Exclude @("*.Xaml*.dll") | ForEach-Object {
              Set-AuthenticodeSignature -Certificate $Certificate -TimestampServer $TimestampServer -HashAlgorithm SHA256 $_
            }
          }

      - name: Build zip package
        shell: pwsh
        run: |
          $Version = Get-Content -Path .\package\VERSION
          Write-Host "Package Version: $Version"
          New-Item -Path "./package" -ItemType Directory -Force | Out-Null
          foreach ($Architecture in @('x64', 'arm64')) {
            $WtDir = "runtimes/win-${Architecture}/native/wt"
            $ZipFile = "WindowsTerminal-${Version}-${Architecture}.zip"
            Compress-Archive -Path "$WtDir/*" -CompressionLevel Optimal -DestinationPath "./package/${ZipFile}"
          }

      - name: Code sign zip package
        if: ${{ env.CODESIGN_THUMBPRINT }}
        shell: pwsh
        run: |
          $TimestampServer = $Env:TIMESTAMP_SERVER
          $Certificate = Get-Item cert:\CurrentUser\My\$Env:CODESIGN_THUMBPRINT
          Install-Module -Name Devolutions.Authenticode -Force
          Set-ZipAuthenticodeSignature -Certificate $Certificate -TimestampServer $TimestampServer "./package/*.zip"
          Remove-Item ./package/*.sig.ps1

      - name: Build nuget package
        shell: pwsh
        run: |
          $Version = Get-Content -Path .\package\VERSION
          Write-Host "Package Version: $Version"
          dotnet pack .\dotnet\Devolutions.WindowsTerminal -c Release -o package /p:Version=$Version

      - name: Upload packages
        uses: actions/upload-artifact@v3
        with:
          name: wt-release
          path: package/*

  publish:
    name: Publish packages
    runs-on: ubuntu-20.04
    environment: nuget-publish
    if: ${{ inputs.dry-run == 'false' }} 

    steps:
      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          name: wt-release
          path: package

      - name: Publish to nuget.org
        shell: pwsh
        run: |
          $NugetApiKey = '${{ secrets.NUGET_API_KEY }}'
          $NugetSource = 'https://api.nuget.org/v3/index.json'
          Get-ChildItem .\package\*.nupkg | ForEach-Object {
            & dotnet nuget push $_.FullName --api-key $NugetApiKey --source $NugetSource --skip-duplicate
          }

      - name: Create GitHub Release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOLUTIONSBOT_TOKEN }}
        working-directory: package
        run: |
          $Version = Get-Content -Path .\VERSION
          Remove-Item .\VERSION | Out-Null

          $HashPath = 'checksums'
          $Files = Get-Item * -Exclude ('VERSION','CHANGELOG.md') | % { Get-FileHash -Algorithm SHA256 $_.FullName }
          $Files | % { "$($_.Hash)  $(Split-Path $_.Path -Leaf)" } | Out-File -FilePath $HashPath -Append -Encoding ASCII

          echo "::group::checksums"
          Get-Content $HashPath
          echo "::endgroup::"

          $ReleaseTag = "v$Version"
          $Repository = $Env:GITHUB_REPOSITORY

          & gh release create $ReleaseTag --repo $Repository --draft ./*
